The service system creating the core api of xbmc is loosely modelled after the DBus found in many Linux systems but lightened and simplified for use within an application. The callback system shares some similairities to those found in windows and os x and has a more direct integration than DBus.

Each service is a self contained module and unique within the xbmc eco system. This means that there exist only one service for an interface. There may exist many listeners of the signals it provides but only one service emitting them. A service may provide methods, properties and signals on events. The properties can be of any type a variant supports (int, bool, double, string, dictionary and array). Each property is referenced by a string key. All services will signal when a property changes and all services provides methods to fetch the properties and hook up listeners of the signals. All services are completely thread safe and all services signals are safe. (The signals may come from many different threads depending on the implementation of the service but no signal will affect the use of the service.)

To acquire the reference of a service the service proxy can be used. It will fetch the reference privately of the service of interest. Any and all creation of services is hidden by the users of them. Simply put, if the service is unable to be referenced due to dependency problems the code will simply fail to compile or throw an exception. The system uses an extremely basic (at compile time) form of dependency injection.

Each service will have different goals with their signals and will behave differently as a result of this. Some services will use the signals as something closer to a callback and will not execute a certain method unless the signals to all listeners execute properly. Some signals will be more on a "nice-to-know" basis and the result a signal yields has no impact on the service.
